import type { NextRequest } from "next/server"

// –ü—Ä–æ—Å—Ç–æ–π WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–≥—Ä—ã
interface GameRoom {
  id: string
  name: string
  hostId: string
  players: Map<string, Player>
  maxPlayers: number
  minPlayers: number
  isPrivate: boolean
  password?: string
  status: "waiting" | "playing" | "finished"
  gameState?: any
  lastUpdate: number
  chatMessages: ChatMessage[]
  roomInfo?: any
}

interface Player {
  id: string
  name: string
  role?: string
  isAlive: boolean
  isBot: boolean
  isHost: boolean
  ws?: WebSocket
}

interface ChatMessage {
  id: string
  sender: string
  message: string
  timestamp: number
  type: "user" | "system"
}

interface GameMessage {
  type: "joinRoom" | "leaveRoom" | "startGame" | "chatMessage" | "getRoomState"
  roomId?: string
  playerId?: string
  playerName?: string
  data?: any
}

class GameServer {
  private rooms = new Map<string, GameRoom>()
  private connections = new Map<WebSocket, { playerId: string; roomId?: string }>()

  generateRoomId(): string {
    return Math.random().toString(36).substring(2, 8).toUpperCase()
  }

  generatePlayerId(): string {
    return Math.random().toString(36).substring(2, 15)
  }

  createRoom(
    name: string,
    maxPlayers: number,
    minPlayers: number,
    isPrivate: boolean,
    password?: string,
    hostId?: string,
  ): string {
    const roomId = this.generateRoomId()
    const room: GameRoom = {
      id: roomId,
      name,
      hostId: hostId || this.generatePlayerId(),
      players: new Map(),
      maxPlayers,
      minPlayers,
      isPrivate,
      password,
      status: "waiting",
      lastUpdate: Date.now(),
      chatMessages: [],
      roomInfo: {},
    }

    this.rooms.set(roomId, room)
    console.log(`‚úÖ –°–û–ó–î–ê–ù–ê –ö–û–ú–ù–ê–¢–ê ${roomId}: ${name}`)
    return roomId
  }

  joinRoom(roomId: string, playerId: string, playerName: string, ws: WebSocket, password?: string): boolean {
    const room = this.rooms.get(roomId)
    if (!room) {
      console.log(`‚ùå –ö–û–ú–ù–ê–¢–ê ${roomId} –ù–ï –ù–ê–ô–î–ï–ù–ê`)
      return false
    }

    if (room.isPrivate && room.password !== password) {
      console.log(`‚ùå –ù–ï–í–ï–†–ù–´–ô –ü–ê–†–û–õ–¨ –î–õ–Ø –ö–û–ú–ù–ê–¢–´ ${roomId}`)
      return false
    }

    if (room.players.size >= room.maxPlayers) {
      console.log(`‚ùå –ö–û–ú–ù–ê–¢–ê ${roomId} –ü–ï–†–ï–ü–û–õ–ù–ï–ù–ê`)
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫
    if (room.players.has(playerId)) {
      console.log(`‚ö†Ô∏è –ò–ì–†–û–ö ${playerName} –£–ñ–ï –í –ö–û–ú–ù–ê–¢–ï ${roomId}, –û–ë–ù–û–í–õ–Ø–ï–ú WEBSOCKET`)
      const existingPlayer = room.players.get(playerId)!
      existingPlayer.ws = ws
      existingPlayer.name = playerName // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      this.connections.set(ws, { playerId, roomId })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–≤—à–µ–º—É—Å—è –∏–≥—Ä–æ–∫—É
      this.sendRoomState(ws, roomId)

      // –¢–∞–∫–∂–µ –æ–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      this.broadcastRoomUpdate(roomId)
      return true
    }

    const isHost = room.players.size === 0 || playerId === room.hostId
    const player: Player = {
      id: playerId,
      name: playerName,
      isAlive: true,
      isBot: false,
      isHost,
      ws,
    }

    // –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ì–†–û–ö–ê –í –ö–û–ú–ù–ê–¢–£
    room.players.set(playerId, player)
    this.connections.set(ws, { playerId, roomId })

    console.log(`üéâ –ò–ì–†–û–ö ${playerName} –ü–†–ò–°–û–ï–î–ò–ù–ò–õ–°–Ø –ö –ö–û–ú–ù–ê–¢–ï ${roomId}. –í–°–ï–ì–û –ò–ì–†–û–ö–û–í: ${room.players.size}`)

    // –î–û–ë–ê–í–õ–Ø–ï–ú –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –í –ß–ê–¢
    const systemMessage: ChatMessage = {
      id: `system-${Date.now()}`,
      sender: "–°–∏—Å—Ç–µ–º–∞",
      message: `–ò–≥—Ä–æ–∫ ${playerName} –∑–∞—à–µ–ª –≤ –∫–æ–º–Ω–∞—Ç—É`,
      timestamp: Date.now(),
      type: "system",
    }
    room.chatMessages.push(systemMessage)

    // –†–ê–°–°–´–õ–ê–ï–ú –í–°–ï–ú –ò–ì–†–û–ö–ê–ú –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
    this.broadcastRoomUpdate(roomId)

    return true
  }

  leaveRoom(playerId: string, roomId?: string) {
    if (!roomId) return

    const room = this.rooms.get(roomId)
    if (!room) return

    const player = room.players.get(playerId)
    if (!player) return

    room.players.delete(playerId)

    console.log(`‚ùå –ò–ì–†–û–ö ${player.name} –ü–û–ö–ò–ù–£–õ –ö–û–ú–ù–ê–¢–£ ${roomId}. –û–°–¢–ê–õ–û–°–¨ –ò–ì–†–û–ö–û–í: ${room.players.size}`)

    // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ—ë
    if (room.players.size === 0) {
      this.rooms.delete(roomId)
      console.log(`üóëÔ∏è –ö–û–ú–ù–ê–¢–ê ${roomId} –£–î–ê–õ–ï–ù–ê (–ü–£–°–¢–ê–Ø)`)
      return
    }

    // –ï—Å–ª–∏ —Ö–æ—Å—Ç —É—à–µ–ª, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ
    if (player.isHost) {
      const newHost = Array.from(room.players.values())[0]
      if (newHost) {
        newHost.isHost = true
        room.hostId = newHost.id
        console.log(`üëë –ù–û–í–´–ô –•–û–°–¢ –ö–û–ú–ù–ê–¢–´ ${roomId}: ${newHost.name}`)
      }
    }

    // –î–û–ë–ê–í–õ–Ø–ï–ú –°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –í –ß–ê–¢
    const systemMessage: ChatMessage = {
      id: `system-${Date.now()}`,
      sender: "–°–∏—Å—Ç–µ–º–∞",
      message: `–ò–≥—Ä–æ–∫ ${player.name} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`,
      timestamp: Date.now(),
      type: "system",
    }
    room.chatMessages.push(systemMessage)

    // –†–ê–°–°–´–õ–ê–ï–ú –í–°–ï–ú –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
    this.broadcastRoomUpdate(roomId)
  }

  addChatMessage(roomId: string, sender: string, message: string, messageId: string) {
    const room = this.rooms.get(roomId)
    if (!room) return

    const chatMessage: ChatMessage = {
      id: messageId,
      sender,
      message,
      timestamp: Date.now(),
      type: "user",
    }

    room.chatMessages.push(chatMessage)
    console.log(`üí¨ –°–û–û–ë–©–ï–ù–ò–ï –í –ö–û–ú–ù–ê–¢–ï ${roomId} –û–¢ ${sender}: ${message}`)

    // –†–ê–°–°–´–õ–ê–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –í–°–ï–ú –í –ö–û–ú–ù–ê–¢–ï
    this.broadcastToRoom(roomId, {
      type: "chatMessage",
      data: chatMessage,
    })
  }

  startGame(roomId: string, hostId: string) {
    const room = this.rooms.get(roomId)
    if (!room || room.hostId !== hostId) return

    if (room.players.size < room.minPlayers) return

    room.status = "playing"
    console.log(`üéÆ –ò–ì–†–ê –í –ö–û–ú–ù–ê–¢–ï ${roomId} –ù–ê–ß–ê–õ–ê–°–¨`)

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    this.broadcastToRoom(roomId, {
      type: "gameStarted",
      data: { players: Array.from(room.players.values()).map((p) => this.playerToJSON(p)) },
    })
  }

  // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–°–°–´–õ–ö–ò –ü–û–õ–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–û–ú–ù–ê–¢–´
  broadcastRoomUpdate(roomId: string) {
    const room = this.rooms.get(roomId)
    if (!room) return

    const roomState = {
      roomInfo: {
        id: room.id,
        name: room.name,
        maxPlayers: room.maxPlayers,
        minPlayers: room.minPlayers,
        isPrivate: room.isPrivate,
        status: room.status,
        autoStartTimer: room.roomInfo.autoStartTimer,
      },
      players: Array.from(room.players.values()).map((p) => this.playerToJSON(p)),
      chatMessages: room.chatMessages,
    }

    console.log(`üì° –†–ê–°–°–´–õ–ê–ï–ú –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–ú–ù–ê–¢–´ ${roomId} –í–°–ï–ú ${room.players.size} –ò–ì–†–û–ö–ê–ú`)
    console.log(`üìä –ò–ì–†–û–ö–ò –í –ö–û–ú–ù–ê–¢–ï: ${roomState.players.map((p) => p.name).join(", ")}`)

    // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –í–°–ï–ú –ò–ì–†–û–ö–ê–ú
    room.players.forEach((player, playerId) => {
      if (player.ws && player.ws.readyState === WebSocket.OPEN) {
        player.ws.send(
          JSON.stringify({
            type: "roomState",
            data: roomState,
          }),
        )
        console.log(`‚úÖ –û–¢–ü–†–ê–í–õ–ï–ù–û –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ì–†–û–ö–£ ${player.name}`)
      } else {
        console.log(`‚ùå WEBSOCKET –ò–ì–†–û–ö–ê ${player.name} –ù–ï –ê–ö–¢–ò–í–ï–ù`)
      }
    })
  }

  sendRoomState(ws: WebSocket, roomId: string) {
    const room = this.rooms.get(roomId)
    if (!room || ws.readyState !== WebSocket.OPEN) return

    const roomState = {
      roomInfo: {
        id: room.id,
        name: room.name,
        maxPlayers: room.maxPlayers,
        minPlayers: room.minPlayers,
        isPrivate: room.isPrivate,
        status: room.status,
      },
      players: Array.from(room.players.values()).map((p) => this.playerToJSON(p)),
      chatMessages: room.chatMessages,
    }

    console.log(`üì§ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ö–û–ú–ù–ê–¢–´ ${roomId}. –ò–ì–†–û–ö–û–í: ${roomState.players.length}`)

    ws.send(
      JSON.stringify({
        type: "roomState",
        data: roomState,
      }),
    )
  }

  broadcastToRoom(roomId: string, message: any) {
    const room = this.rooms.get(roomId)
    if (!room) return

    console.log(`üì° –†–ê–°–°–´–õ–ê–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –¢–ò–ü–ê ${message.type} –í –ö–û–ú–ù–ê–¢–£ ${roomId}`)

    room.players.forEach((player) => {
      if (player.ws && player.ws.readyState === WebSocket.OPEN) {
        player.ws.send(JSON.stringify(message))
      }
    })
  }

  playerToJSON(player: Player) {
    return {
      id: player.id,
      name: player.name,
      isHost: player.isHost,
      isAlive: player.isAlive,
      role: player.role,
    }
  }

  getRooms(): any[] {
    return Array.from(this.rooms.values())
      .filter((room) => !room.isPrivate && room.status === "waiting")
      .map((room) => ({
        id: room.id,
        name: room.name,
        players: room.players.size,
        maxPlayers: room.maxPlayers,
        minPlayers: room.minPlayers,
        status: room.status,
      }))
  }

  handleConnection(ws: WebSocket) {
    console.log("üîå –ù–û–í–û–ï WEBSOCKET –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï")

    ws.on("message", (data: string) => {
      try {
        const message: GameMessage = JSON.parse(data)
        this.handleMessage(ws, message)
      } catch (error) {
        console.error("‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê –°–û–û–ë–©–ï–ù–ò–Ø:", error)
        ws.send(
          JSON.stringify({
            type: "error",
            data: { message: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è" },
          }),
        )
      }
    })

    ws.on("close", () => {
      console.log("üîå WEBSOCKET –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ó–ê–ö–†–´–¢–û")
      const connection = this.connections.get(ws)
      if (connection) {
        // –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ
        const room = this.rooms.get(connection.roomId || "")
        if (room && room.players.has(connection.playerId)) {
          const player = room.players.get(connection.playerId)!
          // –ù–µ —É–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –µ–≥–æ WebSocket –∑–∞–∫—Ä—ã—Ç
          player.ws = undefined

          // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
          const systemMessage: ChatMessage = {
            id: `system-${Date.now()}`,
            sender: "–°–∏—Å—Ç–µ–º–∞",
            message: `–ò–≥—Ä–æ–∫ ${player.name} –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª—Å—è`,
            timestamp: Date.now(),
            type: "system",
          }
          room.chatMessages.push(systemMessage)

          // –û–ø–æ–≤–µ—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
          this.broadcastRoomUpdate(connection.roomId || "")
        }
        this.connections.delete(ws)
      }
    })

    ws.on("error", (error) => {
      console.error("‚ùå WEBSOCKET –û–®–ò–ë–ö–ê:", error)
    })
  }

  startAutoStartTimer(roomId: string, seconds = 30) {
    const room = this.rooms.get(roomId)
    if (!room) return

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    room.roomInfo.autoStartTimer = seconds

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
    this.broadcastRoomUpdate(roomId)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
    const timerId = setInterval(() => {
      const currentRoom = this.rooms.get(roomId)
      if (!currentRoom || currentRoom.status !== "waiting") {
        clearInterval(timerId)
        return
      }

      // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
      currentRoom.roomInfo.autoStartTimer = Math.max(0, (currentRoom.roomInfo.autoStartTimer || 0) - 1)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      this.broadcastRoomUpdate(roomId)

      // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –¥–æ—Å—Ç–∏–≥ –Ω—É–ª—è, –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
      if (currentRoom.roomInfo.autoStartTimer === 0) {
        clearInterval(timerId)
        currentRoom.status = "playing"

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        const systemMessage: ChatMessage = {
          id: `system-${Date.now()}`,
          sender: "–°–∏—Å—Ç–µ–º–∞",
          message: `–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`,
          timestamp: Date.now(),
          type: "system",
        }
        currentRoom.chatMessages.push(systemMessage)

        // –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        this.broadcastToRoom(roomId, {
          type: "gameStarted",
          data: { players: Array.from(currentRoom.players.values()).map((p) => this.playerToJSON(p)) },
        })
      }
    }, 1000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  }

  private handleMessage(ws: WebSocket, message: GameMessage) {
    console.log(`üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: ${message.type}`, {
      roomId: message.roomId,
      playerId: message.playerId,
      playerName: message.playerName,
    })

    switch (message.type) {
      case "joinRoom":
        if (message.roomId && message.playerId && message.playerName) {
          const success = this.joinRoom(message.roomId, message.playerId, message.playerName, ws)
          if (!success) {
            ws.send(
              JSON.stringify({
                type: "error",
                data: { message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ" },
              }),
            )
          }
        }
        break

      case "leaveRoom":
        if (message.roomId && message.playerId) {
          this.leaveRoom(message.playerId, message.roomId)
        }
        break

      case "chatMessage":
        if (message.roomId && message.data?.sender && message.data?.message) {
          this.addChatMessage(
            message.roomId,
            message.data.sender,
            message.data.message,
            message.data.id || Date.now().toString(),
          )
        }
        break

      case "startGame":
        if (message.roomId && message.playerId) {
          this.startGame(message.roomId, message.playerId)
        }
        break

      case "getRoomState":
        if (message.roomId) {
          this.sendRoomState(ws, message.roomId)
        }
        break

      default:
        console.log("‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü –°–û–û–ë–©–ï–ù–ò–Ø:", message.type)
    }
  }
}

const gameServer = new GameServer()

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const upgrade = request.headers.get("upgrade")

  if (upgrade !== "websocket") {
    return new Response("Expected websocket", { status: 426 })
  }

  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã WebSocket upgrade
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
  return new Response(
    JSON.stringify({
      message: "WebSocket server ready",
      rooms: gameServer.getRooms().length,
    }),
    {
      headers: { "Content-Type": "application/json" },
    },
  )
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
export { gameServer }
